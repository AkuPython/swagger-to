// Code generated by swagger_to. DO NOT EDIT.
package product

// Automatically generated file by swagger_to. DO NOT EDIT OR APPEND ANYTHING!

import (
	"github.com/gorilla/mux"
	"net/http"
)

// SetupRouter sets up a router. If you don't use any middleware, you are good to go.
// Otherwise, you need to maually re-implement this function with your middlewares.
func SetupRouter(h Handler) *mux.Router {
	r := mux.NewRouter()

	r.HandleFunc(`/products`,
		func(w http.ResponseWriter, r *http.Request) {
			WrapListProducts(h, w, r)
		}).Methods("get")

	r.HandleFunc(`/products/{id}`,
		func(w http.ResponseWriter, r *http.Request) {
			WrapGetProduct(h, w, r)
		}).Methods("get")

	return r
}

// WrapListProducts wraps the path `/products` with the method "get".
//
// Path description:
// describe products
func WrapListProducts(h Handler, w http.ResponseWriter, r *http.Request) {
	var aWithAttributes *bool

	q := r.URL.Query()

	if _, ok := q["with_attributes"]; ok {
		{
			parsed, err := strconv.ParseBool(q.Get("with_attributes"))
			if err != nil {
				http.Error(w, "Parameter 'with_attributes': "+err.Error(), http.StatusBadRequest)
				return
			}
			aWithAttributes = &parsed
		}
	}

	h.ListProducts(w,
		r,
		aWithAttributes)
}

// WrapGetProduct wraps the path `/products/{id}` with the method "get".
//
// Path description:
// product detail
func WrapGetProduct(h Handler, w http.ResponseWriter, r *http.Request) {
	var aID string

	vars := mux.Vars(r)

	if _, ok := vars["id"]; !ok {
		http.Error(w, "Parameter 'id' expected in path", http.StatusBadRequest)
		return
	}
	aID = vars["id"]

	h.GetProduct(w,
		r,
		aID)
}

// Automatically generated file by swagger_to. DO NOT EDIT OR APPEND ANYTHING!
