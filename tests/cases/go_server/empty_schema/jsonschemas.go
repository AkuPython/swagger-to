// Code generated by swagger_to. DO NOT EDIT.
package product

// Automatically generated file by swagger_to. DO NOT EDIT OR APPEND ANYTHING!

import (
	"errors"
	"fmt"
	"github.com/xeipuuv/gojsonschema"
)

func mustNewJSONSchema(text string, name string) *gojsonschema.Schema {
	loader := gojsonschema.NewStringLoader(text)
	schema, err := gojsonschema.NewSchema(loader)
	if err != nil {
		panic(fmt.Sprintf("failed to load JSON Schema %#v: %s", text, err.Error()))
	}
	return schema
}

var jsonSchemaCapacityText = `{
  "title": "Capacity",
  "$schema": "http://json-schema.org/draft-04/schema#",
  "type": "integer",
  "format": "int32",
  "description": "is an identifiable primitive definition."
}`

var jsonSchemaProductSummaryText = `{
  "title": "ProductSummary",
  "$schema": "http://json-schema.org/draft-04/schema#",
  "definitions": {
    "Capacity": {
      "type": "integer",
      "format": "int32",
      "description": "is an identifiable primitive definition."
    }
  },
  "description": "is a product summary object.",
  "type": "object",
  "properties": {
    "product_id": {
      "type": "string",
      "description": "is a test string property."
    },
    "metadata": {},
    "capacity": {
      "$ref": "#/definitions/Capacity"
    }
  },
  "required": [
    "product_id"
  ]
}`

var jsonSchemaProductDetailText = `{
  "title": "ProductDetail",
  "$schema": "http://json-schema.org/draft-04/schema#",
  "definitions": {
    "Capacity": {
      "type": "integer",
      "format": "int32",
      "description": "is an identifiable primitive definition."
    }
  },
  "description": "is a product detail",
  "type": "object",
  "properties": {
    "product_id": {
      "type": "string",
      "description": "is a test string property."
    },
    "capacity": {
      "$ref": "#/definitions/Capacity"
    },
    "metadata": {},
    "data": {
      "type": "object"
    }
  },
  "required": [
    "product_id",
    "metadata",
    "data"
  ]
}`

var jsonSchemaCapacity = mustNewJSONSchema(
	jsonSchemaCapacityText,
	"Capacity")

var jsonSchemaProductSummary = mustNewJSONSchema(
	jsonSchemaProductSummaryText,
	"ProductSummary")

var jsonSchemaProductDetail = mustNewJSONSchema(
	jsonSchemaProductDetailText,
	"ProductDetail")

// ValidateAgainstCapacitySchema validates a message coming from the client against Capacity schema.
func ValidateAgainstCapacitySchema(bb []byte) error {
	loader := gojsonschema.NewStringLoader(string(bb))
	result, err := jsonSchemaCapacity.Validate(loader)
	if err != nil {
		return err
	}

	if result.Valid() {
		return nil
	}

	msg := ""
	for i, valErr := range result.Errors() {
		if i > 0 {
			msg += ", "
		}
		msg += valErr.String()
	}
	return errors.New(msg)
}

// ValidateAgainstProductSummarySchema validates a message coming from the client against ProductSummary schema.
func ValidateAgainstProductSummarySchema(bb []byte) error {
	loader := gojsonschema.NewStringLoader(string(bb))
	result, err := jsonSchemaProductSummary.Validate(loader)
	if err != nil {
		return err
	}

	if result.Valid() {
		return nil
	}

	msg := ""
	for i, valErr := range result.Errors() {
		if i > 0 {
			msg += ", "
		}
		msg += valErr.String()
	}
	return errors.New(msg)
}

// ValidateAgainstProductDetailSchema validates a message coming from the client against ProductDetail schema.
func ValidateAgainstProductDetailSchema(bb []byte) error {
	loader := gojsonschema.NewStringLoader(string(bb))
	result, err := jsonSchemaProductDetail.Validate(loader)
	if err != nil {
		return err
	}

	if result.Valid() {
		return nil
	}

	msg := ""
	for i, valErr := range result.Errors() {
		if i > 0 {
			msg += ", "
		}
		msg += valErr.String()
	}
	return errors.New(msg)
}

// Automatically generated file by swagger_to. DO NOT EDIT OR APPEND ANYTHING!
