// Code generated by swagger_to. DO NOT EDIT.
package product

// Automatically generated file by swagger_to. DO NOT EDIT OR APPEND ANYTHING!

import (
	"github.com/gorilla/mux"
	"net/http"
	"strconv"
)

// SetupRouter sets up a router. If you don't use any middleware, you are good to go.
// Otherwise, you need to maually re-implement this function with your middlewares.
func SetupRouter(h Handler) *mux.Router {
	r := mux.NewRouter()

	r.HandleFunc(`/test_endpoint`,
		func(w http.ResponseWriter, r *http.Request) {
			WrapTestEndpoint(h, w, r)
		}).Methods("get")

	return r
}

// WrapTestEndpoint wraps the path `/test_endpoint` with the method "get".
//
// Path description:
// test typed request parameter
func WrapTestEndpoint(h Handler, w http.ResponseWriter, r *http.Request) {
	var aStringParam string
	var aStringOptionalParam *string
	var aInt32Param *int32
	var aInt64Param *int64
	var aFloatParam *float32
	var aBooleanParam *bool

	q := r.URL.Query()

	if _, ok := q["string_param"]; !ok {
		http.Error(w, "Parameter 'string_param' expected in query", http.StatusBadRequest)
		return
	}
	aStringParam = q.Get("string_param")

	if _, ok := q["string_optional_param"]; ok {
		val := q.Get("string_optional_param")
		aStringOptionalParam = &val
	}

	if _, ok := q["int32_param"]; ok {
		{
			parsed, err := strconv.ParseInt(q.Get("int32_param"), 10, 32)
			if err != nil {
				http.Error(w, "Parameter 'int32_param': "+err.Error(), http.StatusBadRequest)
				return
			}
			converted := int32(parsed)
			aInt32Param = &converted
		}
	}

	if _, ok := q["int64_param"]; ok {
		{
			parsed, err := strconv.ParseInt(q.Get("int64_param"), 10, 64)
			if err != nil {
				http.Error(w, "Parameter 'int64_param': "+err.Error(), http.StatusBadRequest)
				return
			}
			converted := int64(parsed)
			aInt64Param = &converted
		}
	}

	if _, ok := q["float_param"]; ok {
		{
			parsed, err := strconv.ParseFloat(q.Get("float_param"), 32)
			if err != nil {
				http.Error(w, "Parameter 'float_param': "+err.Error(), http.StatusBadRequest)
				return
			}
			converted := float32(parsed)
			aFloatParam = &converted
		}
	}

	if _, ok := q["boolean_param"]; ok {
		{
			parsed, err := strconv.ParseBool(q.Get("boolean_param"))
			if err != nil {
				http.Error(w, "Parameter 'boolean_param': "+err.Error(), http.StatusBadRequest)
				return
			}
			aBooleanParam = &parsed
		}
	}

	h.TestEndpoint(w,
		r,
		aStringParam,
		aStringOptionalParam,
		aInt32Param,
		aInt64Param,
		aFloatParam,
		aBooleanParam)
}

// Automatically generated file by swagger_to. DO NOT EDIT OR APPEND ANYTHING!
